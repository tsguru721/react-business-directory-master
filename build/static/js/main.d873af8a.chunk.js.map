{"version":3,"sources":["components/create.component.js","components/edit.component.js","components/index.component.js","App.js","serviceWorker.js","index.js"],"names":["Create","react_default","a","createElement","Component","Edit","Index","App","react_router_dom","className","to","id","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAEqBA,mLAEb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kDAJoBC,aCAfC,mLAEb,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gDAJkBC,aCAbE,mLAEb,OACIL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iDAJmBC,aCuCpBG,mLA/BX,OACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aACbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,iDACbR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAME,GAAI,IAAKD,UAAU,gBAAzB,sBACAR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,2BAA2BE,GAAG,0BAC3CV,EAAAC,EAAAC,cAAA,MAAIM,UAAU,sBACdR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,YACVR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAME,GAAI,IAAKD,UAAU,YAAzB,SAEFR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,YACZR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAME,GAAI,UAAWD,UAAU,YAA/B,WAEFR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,YACZR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAME,GAAI,SAAUD,UAAU,YAA9B,aAZV,IAgBSR,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,4CAjBF,IAiB0CF,EAAAC,EAAAC,cAAA,WACxCF,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAYf,IACxCC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAYV,IACpCJ,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAYT,cAzB7BF,aCIEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACPrB,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACAP,EAAAC,EAAAC,cAACoB,EAAD,OACkBC,SAASC,eAAe,SDuHtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d873af8a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Create extends Component {\n    render() {\n        return (\n            <div>\n                <p>Welcome to Create Component!!</p>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\n\nexport default class Edit extends Component {\n    render() {\n        return (\n            <div>\n                <p>Welcome to Edit Component!!</p>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\n\nexport default class Index extends Component {\n    render() {\n        return (\n            <div>\n                <p>Welcome to Index Component!!</p>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport Create from './components/create.component';\nimport Edit from './components/edit.component';\nimport Index from './components/index.component';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link to={'/'} className=\"navbar-brand\">React CRUD Example</Link>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n              <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                  <Link to={'/'} className=\"nav-link\">Home</Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link to={'/create'} className=\"nav-link\">Create</Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link to={'/index'} className=\"nav-link\">Index</Link>\n                </li>\n              </ul>\n            </div>\n          </nav> <br/>\n          <h2>Welcome to React CRUD Tutorial</h2> <br/>\n          <Switch>\n              <Route exact path='/create' component={ Create } />\n              <Route path='/edit/:id' component={ Edit } />\n              <Route path='/index' component={ Index } />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n  <App />\n  </BrowserRouter>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}